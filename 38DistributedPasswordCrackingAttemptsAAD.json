{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspace": {
            "type": "String"
        }
    },
    "resources": [
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/38000000-0000-0000-0000-000000000000')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/38000000-0000-0000-0000-000000000000')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2022-09-01-preview",
            "properties": {
                "displayName": "[concat(parameters('workspace'),' - Distributed Password cracking attempts in AzureAD')]",
                "description": "Identifies distributed password cracking attempts from the Microsoft Entra ID SigninLogs.\nThe query looks for unusually high number of failed password attempts coming from multiple locations for a user account.\nReferences: https://docs.microsoft.com/azure/active-directory/reports-monitoring/reference-sign-ins-error-codes\n50053   Account is locked because the user tried to sign in too many times with an incorrect user ID or password.\n50055   Invalid password, entered expired password.\n50056   Invalid or null password - Password does not exist in store for this user.\n50126   Invalid username or password, or invalid on-premises username or password.",
                "severity": "Medium",
                "enabled": true,
                "query": "let s_threshold = 30;\nlet l_threshold = 3;\nlet aadFunc = (tableName: string) {\n    table(tableName)\n    | where OperationName =~ \"Sign-in activity\"\n    // Error codes that we want to look at as they are related to the use of incorrect password.\n    | where ResultType in (\"50126\", \"50053\", \"50055\", \"50056\")\n    | extend\n        DeviceDetail = todynamic(DeviceDetail),\n        Status = todynamic(DeviceDetail),\n        LocationDetails = todynamic(LocationDetails)\n    | extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser\n    | extend\n        StatusCode = tostring(Status.errorCode),\n        StatusDetails = tostring(Status.additionalDetails)\n    | extend LocationString = strcat(tostring(LocationDetails.countryOrRegion), \"/\", tostring(LocationDetails.state), \"/\", tostring(LocationDetails.city))\n    | summarize\n        StartTime = min(TimeGenerated),\n        EndTime = max(TimeGenerated),\n        LocationCount=dcount(LocationString),\n        Location = make_set(LocationString, 100),\n        IPAddress = make_set(IPAddress, 100),\n        IPAddressCount = dcount(IPAddress),\n        AppDisplayName = make_set(AppDisplayName, 100),\n        ResultDescription = make_set(ResultDescription, 50),\n        Browser = make_set(Browser, 20),\n        OS = make_set(OS, 20),\n        SigninCount = count()\n        by UserPrincipalName, Type\n    // Setting a generic threshold - Can be different for different environment\n    | where SigninCount > s_threshold and LocationCount >= l_threshold\n    | extend\n        Location = tostring(Location),\n        IPAddress = tostring(IPAddress),\n        AppDisplayName = tostring(AppDisplayName),\n        ResultDescription = tostring(ResultDescription),\n        Browser = tostring(Browser),\n        OS = tostring(OS)\n    | extend\n        timestamp = StartTime,\n        Name = tostring(split(UserPrincipalName, '@', 0)[0]),\n        UPNSuffix = tostring(split(UserPrincipalName, '@', 1)[0])\n};\nlet aadSignin = aadFunc(\"SigninLogs\");\nlet aadNonInt = aadFunc(\"AADNonInteractiveUserSignInLogs\");\nunion isfuzzy=true aadSignin, aadNonInt\n| where parse_json(ResultDescription) !contains \"Sign-in was blocked because it came from an IP address with malicious activity\" and parse_json(ResultDescription) !contains \"Account is locked because user tried to sign in too many times with an incorrect user ID or password.\"\n",
                "queryFrequency": "P1D",
                "queryPeriod": "P1D",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "startTimeUtc": null,
                "tactics": [
                    "CredentialAccess"
                ],
                "techniques": [
                    "T1110"
                ],
                "alertRuleTemplateName": "bfb1c90f-8006-4325-98be-c7fffbc254d6",
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": false,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": null,
                "entityMappings": [
                    {
                        "entityType": "Account",
                        "fieldMappings": [
                            {
                                "identifier": "Name",
                                "columnName": "Name"
                            },
                            {
                                "identifier": "UPNSuffix",
                                "columnName": "UPNSuffix"
                            }
                        ]
                    },
                    {
                        "entityType": "IP",
                        "fieldMappings": [
                            {
                                "identifier": "Address",
                                "columnName": "IPAddress"
                            }
                        ]
                    }
                ],
                "sentinelEntitiesMappings": null,
                "templateVersion": "1.0.3"
            }
        }
    ]
}